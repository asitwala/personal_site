Elm.Pi = Elm.Pi || {};
Elm.Pi.make = function (_elm) {
   "use strict";
   _elm.Pi = _elm.Pi || {};
   if (_elm.Pi.values) return _elm.Pi.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var piApprox = function (st) {
      var miss_list = $Basics.snd($Basics.snd(st));
      var misses = $Basics.fst($Basics.snd(st)) / 1 | 0;
      var hit_list = $Basics.snd($Basics.fst(st));
      var hits = $Basics.fst($Basics.fst(st)) / 1 | 0;
      var total = $Basics.toFloat(hits + misses);
      return $Basics.toFloat(hits) / total * 4;
   };
   var pointsToCircles = F3(function (col,r,p_lst) {
      var scale_point = function (pt) {    return {ctor: "_Tuple2",_0: 200 * pt.x,_1: 200 * pt.y};};
      var shape_1 = $Graphics$Collage.circle(r);
      var form_1 = A2($Graphics$Collage.filled,col,shape_1);
      var move_point = function (pt) {    return A2($Graphics$Collage.move,scale_point(pt),form_1);};
      return A2($List.map,move_point,p_lst);
   });
   var genPoint = function (s) {
      var output_1 = A2($Random.generate,A2($Random.$float,-1.0,1.0),s);
      var output_2 = A2($Random.generate,A2($Random.$float,-1.0,1.0),$Basics.snd(output_1));
      return {ctor: "_Tuple2",_0: {x: $Basics.fst(output_1),y: $Basics.fst(output_2)},_1: $Basics.snd(output_2)};
   };
   var signalPointSeed = function () {
      var timer = $Time.every(50);
      var point = {x: 0.0,y: 0.0};
      var s = $Random.initialSeed(97);
      return A3($Signal.foldp,F2(function (time,point_tuple) {    return genPoint($Basics.snd(point_tuple));}),{ctor: "_Tuple2",_0: point,_1: s},timer);
   }();
   var signalPoint = A2($Signal.map,$Basics.fst,signalPointSeed);
   var toPoint = function (_p0) {    var _p1 = _p0;return {x: _p1._0,y: _p1._1};};
   var not_inRange = function (pt) {
      var y_2 = 0.3;
      var y_1 = 0.4;
      var case_2 = _U.cmp(pt.y,0 - y_1) > -1 && _U.cmp(pt.y,y_1) < 1;
      var x_3 = 0.5;
      var case_4 = _U.cmp(pt.x,0 - x_3) > -1 && (_U.cmp(pt.x,x_3) < 1 && (_U.cmp(pt.y,y_2) > -1 && _U.cmp(pt.y,y_1) < 1));
      var x_2 = 0.35;
      var x_1 = 0.25;
      var case_1 = _U.cmp(pt.x,0 - x_2) > -1 && _U.cmp(pt.x,0 - x_1) < 1;
      var case_3 = _U.cmp(pt.x,x_1) > -1 && _U.cmp(pt.x,x_2) < 1;
      return case_1 && case_2 || (case_3 && case_2 || case_4) ? false : true;
   };
   var inRange = function (pt) {
      var y_2 = 0.3;
      var y_1 = 0.4;
      var case_2 = _U.cmp(pt.y,0 - y_1) > -1 && _U.cmp(pt.y,y_1) < 1;
      var x_3 = 0.5;
      var case_4 = _U.cmp(pt.x,0 - x_3) > -1 && (_U.cmp(pt.x,x_3) < 1 && (_U.cmp(pt.y,y_2) > -1 && _U.cmp(pt.y,y_1) < 1));
      var x_2 = 0.35;
      var x_1 = 0.25;
      var case_1 = _U.cmp(pt.x,0 - x_2) > -1 && _U.cmp(pt.x,0 - x_1) < 1;
      var case_3 = _U.cmp(pt.x,x_1) > -1 && _U.cmp(pt.x,x_2) < 1;
      return case_1 && case_2 || (case_3 && case_2 || case_4) ? true : false;
   };
   var view = F2(function (_p2,st) {
      var _p3 = _p2;
      var miss_form = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: 110,_1: -220},
      $Graphics$Collage.toForm($Graphics$Element.rightAligned($Text.fromString(A2($Basics._op["++"],
      "Misses = ",
      $Basics.toString($Basics.fst($Basics.snd(st))))))));
      var hit_form = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: -120,_1: -220},
      $Graphics$Collage.toForm($Graphics$Element.rightAligned($Text.fromString(A2($Basics._op["++"],
      "Hits = ",
      $Basics.toString($Basics.fst($Basics.fst(st))))))));
      var points_num = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: 0,_1: 220},
      $Graphics$Collage.toForm($Graphics$Element.justified(A2($Text.height,
      18,
      $Text.bold($Text.fromString($Basics.toString($Basics.fst($Basics.fst(st)) + $Basics.fst($Basics.snd(st)))))))));
      var points_form = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: 0,_1: 240},
      $Graphics$Collage.toForm($Graphics$Element.justified($Text.fromString("Number of Points Generated "))));
      var title_form = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: 0,_1: 280},
      $Graphics$Collage.toForm($Graphics$Element.justified(A2($Text.height,24,$Text.bold($Text.fromString("Approximating the Value of π"))))));
      var hit_list = $Basics.snd($Basics.fst(st));
      var pi_list = A2($List.filter,inRange,hit_list);
      var cir_list = A2($List.filter,not_inRange,hit_list);
      var form_3 = A2($Graphics$Collage.outlined,$Graphics$Collage.dotted($Color.orange),A2($Graphics$Collage.rect,400,400));
      var form_2 = A2($Graphics$Collage.outlined,$Graphics$Collage.dotted($Color.blue),$Graphics$Collage.circle(200));
      var color_1_up = A4($Color.rgba,0,0,255,0.3);
      var color_5 = A4($Color.rgba,255,128,0,0.8);
      var color_4 = A4($Color.rgba,50,45,127,0.85);
      var dark_list = A3(pointsToCircles,color_4,4,pi_list);
      var pi_form = A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: 0,_1: -270},
      $Graphics$Collage.toForm($Graphics$Element.justified(A2($Text.color,
      color_4,
      A2($Text.height,20,$Text.bold($Text.fromString(A2($Basics._op["++"],"π = ",$Basics.toString(piApprox(st))))))))));
      var color_3 = A4($Color.rgba,255,128,0,0.5);
      var list_2 = A3(pointsToCircles,color_3,3,$Basics.snd($Basics.snd(st)));
      var color_2 = A4($Color.rgba,255,128,0,0.1);
      var form_4 = A2($Graphics$Collage.filled,color_2,A2($Graphics$Collage.rect,400,400));
      var color_1a = A4($Color.rgba,0,0,255,0.12);
      var form_5 = A2($Graphics$Collage.filled,color_1a,$Graphics$Collage.circle(200));
      var color_1 = A4($Color.rgba,0,0,255,0.4);
      var light_list = A3(pointsToCircles,color_1,3,cir_list);
      return A3($Graphics$Collage.collage,
      _p3._0,
      _p3._1,
      A2($List._op["::"],
      form_4,
      A2($List._op["::"],
      form_5,
      A2($List._op["::"],
      form_2,
      A2($List._op["::"],
      form_3,
      A2($List._op["::"],
      pi_form,
      A2($List._op["::"],
      hit_form,
      A2($List._op["::"],
      miss_form,
      A2($List._op["::"],
      points_num,
      A2($List._op["::"],points_form,A2($List._op["::"],title_form,A2($Basics._op["++"],list_2,A2($Basics._op["++"],dark_list,light_list)))))))))))));
   });
   var upstate = F2(function (pt,st) {
      var miss_list = $Basics.snd($Basics.snd(st));
      var misses = $Basics.fst($Basics.snd(st));
      var hit_list = $Basics.snd($Basics.fst(st));
      var hits = $Basics.fst($Basics.fst(st));
      var y_sqr = Math.pow(pt.y,2);
      var x_sqr = Math.pow(pt.x,2);
      return _U.cmp(x_sqr + y_sqr,1) < 1 ? {ctor: "_Tuple2"
                                           ,_0: {ctor: "_Tuple2",_0: hits + 1,_1: A2($List._op["::"],pt,hit_list)}
                                           ,_1: {ctor: "_Tuple2",_0: misses,_1: miss_list}} : {ctor: "_Tuple2"
                                                                                              ,_0: {ctor: "_Tuple2",_0: hits,_1: hit_list}
                                                                                              ,_1: {ctor: "_Tuple2"
                                                                                                   ,_0: misses + 1
                                                                                                   ,_1: A2($List._op["::"],pt,miss_list)}};
   });
   var initState = {ctor: "_Tuple2",_0: {ctor: "_Tuple2",_0: 0,_1: _U.list([])},_1: {ctor: "_Tuple2",_0: 0,_1: _U.list([])}};
   var main = A3($Signal.map2,view,$Window.dimensions,A3($Signal.foldp,upstate,initState,signalPoint));
   var Point = F2(function (a,b) {    return {x: a,y: b};});
   return _elm.Pi.values = {_op: _op
                           ,Point: Point
                           ,initState: initState
                           ,upstate: upstate
                           ,inRange: inRange
                           ,not_inRange: not_inRange
                           ,view: view
                           ,toPoint: toPoint
                           ,genPoint: genPoint
                           ,signalPointSeed: signalPointSeed
                           ,signalPoint: signalPoint
                           ,pointsToCircles: pointsToCircles
                           ,piApprox: piApprox
                           ,main: main};
};